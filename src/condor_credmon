#!/usr/bin/python
import os
import sys
import pwd
import logging
from logging import handlers
from datetime import datetime
from subprocess import Popen, PIPE
from functools import partial
import signal
import time
import fnmatch
import htcondor

def setup_logging():
    """
    Set-up logging for the cred monitor.
    """
    logger = logging.getLogger('credmon')
    logger.setLevel(logging.INFO)
    log_file = '/var/log/condor/credmon.log'
    cred_lfh = handlers.WatchedFileHandler(log_file)
    cred_lfh.setLevel(logging.DEBUG)
    cred_log_fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    formatter = logging.Formatter(cred_log_fmt)
    cred_lfh.setFormatter(formatter)
    logger.addHandler(cred_lfh)
    return logger

def signal_handler(logger, signum, frame):
    """
    Catch signals. Use SIGHUP as a sleep interrupt.
    Any other signals should exit the program.
    """
    if signum == signal.SIGHUP:
        logger.info('Got SIGHUP: Triggering READ of Credential Directory')
        return
    exit_msg = 'Got signal {0} at frame {1} terminating.'
    logger.info(exit_msg.format(signum, frame))
    sys.exit(0)

def should_renew(base, username):
    """
    Determines the life left in the active kerberos TGT.
    If no active TGT is found then it returns True.
    If the life left on the TGT is 60 minutes or less then it
    renews.
    """
    cc_file = os.path.join(base, '{0}.cc'.format(username))
    if not os.path.exists(cc_file):
        return True
    cc_starttime = datetime.fromtimestamp(os.path.getctime(cc_file))
    time_diff = float((datetime.now() - cc_starttime).seconds)/3600
    if time_diff >= 5:
        return True
    return False

def run_sys(pcmd, log, debug, prxec=None, stdin=None, env=None):
    """
    Abstracts out dealing with system calls to bash scripts.

    Also handles pre-exec functions if they're required.
    """
    chld_p = Popen(pcmd, preexec_fn=prxec, stdout=PIPE, stderr=PIPE, stdin=PIPE, env=env)
    chld_out, chld_err = chld_p.communicate(input=stdin)
    if debug == True:## and chld_p.returncode != 0:
        log.info(chld_out.decode().rstrip())
        log.info(chld_err.decode().rstrip())
    log.info('{0} returned {1}'.format(pcmd, chld_p.returncode))
    return chld_p.returncode

def demote(user_uid, user_gid):
    """Pass the function 'set_ids' to preexec_fn, rather than just calling
    setuid and setgid. This will change the ids for that subprocess only"""

    def set_ids():
        """
        Demote the subprocess user to the target uid/gid combo.
        """
        os.setregid(user_gid, user_gid)
        os.setreuid(user_uid, user_uid)
    return set_ids

class RenewPostAction(object):
    """
    Class to abstract dealing with any actions that need to occur after TGT
    Renewal, such as aklog and others.
    """

    def __init__(self, program, debug, user_priv):
        self.program = program
        self.log = logging.getLogger('credmon.monitor.renew')
        self.debug = debug
        self.user_priv = user_priv

    def _env(self, uid, gid):
	return os.environ.copy()

    def run(self, uid, gid):
        """
        Run the intended post action.
        """
	pre_exec = None
	if self.user_priv:
		self.log.info("demoting %s to run with uid %d" % (self.program, uid))
		pre_exec = demote(uid, gid)
        return run_sys(self.program, self.log, self.debug, pre_exec, env=self._env(uid, gid))

class AkLogAction(RenewPostAction):

    def _env(self, uid, gid):
	env = os.environ.copy()
	env["CONDOR_KRB5_UID"] = str(uid)
        env["PATH"] = env["PATH"] + ":/usr/sue/bin"
	return env

class CredentialMonitor(object):
    """
    CERN HTCondor Credential Monitor

    This program periodically or when SIGHUP'd scans the registered
    credential directory for new opaque tokens and when found pushes
    them to the Kerberos TGT retriever for a new/renewed TGT.

    :param cred_dir: The credential directory to scan.
    :type cred_dir: str
    """
    tgt_prog = ["/usr/bin/ngbatchauth", "--debug"]

    def __init__(self, cred_dir):
        self.cred_dir = cred_dir
        self.schedd = False
        self._is_schedd()
        self.log = logging.getLogger('credmon.monitor')
        self.post_actions = []
        if self.schedd:
            self.post_actions.append(AkLogAction(["/usr/bin/condor_aklog"], True, False))
        else:
            self.post_actions.append(AkLogAction(["/usr/bin/aklog"], True, True))
        self.post_actions.append(RenewPostAction(["/usr/bin/eosfusebind", "-g"], True, True))
        self.debug = True

    def _is_schedd(self):
        try:
            schedd = htcondor.Schedd()
        except RuntimeError, e:
            schedd = None
        self.schedd = schedd

    def drop_pid(self):
        """
        Drop a PID file in the cred dir for condor to find.
        """
        curr_pid = os.getpid()
        pid_path = os.path.join(self.cred_dir, "pid")
        with open(pid_path, "w") as pid_fd:
            pid_fd.write("{0}".format(curr_pid))
        return

    def credmon_incomplete(self):
        """
        Start with no CREDMON_COMPLETE
        """
        # Arguably we should check for uptime, but it's just aklog that
        # occurs as a result, so no premature optimisation
        complete_name = os.path.join(self.cred_dir, 'CREDMON_COMPLETE')
        if os.path.isfile(complete_name):
            os.unlink(complete_name)

    def credmon_complete(self):
        """
        Condor expects a CREDMON_COMPLETE empty file to appear after a run.
        """
        complete_name = os.path.join(self.cred_dir, 'CREDMON_COMPLETE')
        with open(complete_name, 'a'):
            os.utime(complete_name, None)
        return

    def get_active_users(self):
        if not self.schedd:
            raise NotImplementedError
        schedd = htcondor.Schedd()
        all_jobs = schedd.query('true', ['Owner'])
        active_users = set(job['Owner'] for job in all_jobs)
        return active_users

    def get_dead_creds(self):
        all_creds = fnmatch.filter(os.listdir(self.cred_dir), '*.cred')
        cred_users = set([os.path.splitext(cred)[0] for cred in all_creds])
        try:
            active_users = self.get_active_users()
        except NotImplementedError:
            return []
        os.seteuid(0)
        os.setuid(0)
        return cred_users.difference(active_users)

    def remove_dead_creds(self):
        dead_cred_users = self.get_dead_creds()
        for user in dead_cred_users:
            cred_file = os.path.join(self.cred_dir, user + '.cred')
            cc_file = os.path.join(self.cred_dir, user + '.cc')
            try:
                os.remove(cred_file)
                os.remove(cc_file)
            except OSError, ose:
                pass
        mark_files = fnmatch.filter(os.listdir(self.cred_dir), '*.mark')
        for mark_file in mark_files:
            mark_path = os.path.join(self.cred_dir, mark_file)
            try:
                os.remove(mark_path)
            except OSError, ose:
                self.log.info(ose)

    def atomic_rename(self, tmp_file, target_file, username):
        """
        If successful HTCondor will only be dealing with fully prepared and
        usable credential cache files.

        :param tmp_file: The temp file path containing
            the TGT acquired from the ngbauth service.
        :type tmp_file: string
        :param target_file: The target file.
        :return: Whether the chmod/rename was successful.
        :rtype: bool
        """
        try:
            os.chmod(tmp_file, 0400)
            os.chown(tmp_file, 0, 0)
            os.rename(tmp_file, target_file)
        except OSError:
            er_msg = 'No cred file for user {0}. TGT Acquire failed.'
            self.log.error(er_msg.format(username))
            return False
        return True

    def re_own(self, cc_file, t_uid, t_gid):
        try:
            os.chown(cc_file, t_uid, t_gid)
        except Exception:
            err = 'Failed to chown tmp cc file to uid {0}'
            self.log.error(err.format(t_uid))

    def tgt_callout(self, username, cred_path, tmp_file, target_file):
        """
        Call-out to the TGT renewal system and get a new TGT for the user.
        """
        with open(cred_path, 'r') as cred_fd:
            opaque_cred = cred_fd.read()
        msg_attempt = 'User {0} KRB5CCNAME {1} tmpfile {2}'
        self.log.info(msg_attempt.format(username, target_file, tmp_file))
        os.environ['USER'] = username
	os.environ['KRB5CCNAME'] = 'FILE:{0}'.format(tmp_file)
        tgt_rc = run_sys(self.tgt_prog, self.log, self.debug, stdin=opaque_cred)
        return tgt_rc

    def acquire_tgt(self, cred_path, base, username):
        """
        Read in the opaque cred produced by the credential_producer.
        Set the USER, and KRB5CCNAME ENV vars appropriately.
        Finally, call out to the TGT renewer/generator.
        """
        tmp_file = os.path.join(base, '{0}.cc.tmp'.format(username))
        target_file = os.path.join(base, '{0}.cc'.format(username))
        tgt_rc = self.tgt_callout(username, cred_path, tmp_file, target_file)
        if tgt_rc != 0:
            return False
	os.environ["KRB5CCNAME"] = 'FILE:{0}'.format(tmp_file)
        t_pwn = pwd.getpwnam(username)
        t_uid = t_pwn.pw_uid
        t_gid = t_pwn.pw_gid
        self.log.info('Executing under EUID: {0}'.format(t_uid))
	if os.path.isfile(tmp_file):
	    self.log.info("{0} exists".format(tmp_file))
	else:
	    self.log.info("{0} doesn't exist".format(tmp_file))
        self.re_own(tmp_file, t_uid, t_gid)
        self.log.info(os.environ['KRB5CCNAME'])
        for post_act in self.post_actions:
	    post_act.run(t_uid, t_gid)
        return self.atomic_rename(tmp_file, target_file, username)

    def process_cred_file(self, cred_path):
        """
        Split out the file path to get username and base.
        Pass that data to the tgt acquiring function.
        """
        base, file_name = os.path.split(cred_path)
        username = os.path.splitext(file_name)[0]
        if should_renew(base, username):
            fnd_msg = 'Found {0}, acquiring TGT and .cc file'
            self.log.info(fnd_msg.format(cred_path))
            success = self.acquire_tgt(cred_path, base, username)
            if success:
                succ_msg = "Successfully renewed TGT for user: {0}"
                self.log.info(succ_msg.format(username))
            else:
                err_msg = "Failed to renew TGT for user: {0}"
                self.log.error(err_msg.format(username))
        else:
            complete_name = os.path.join(self.cred_dir, 'CREDMON_COMPLETE')
            if not os.path.isfile:
                # we may have rebooted, and thus need to refresh afs tokens
                t_pwn = pwd.getpwnam(username)
                t_uid = t_pwn.pw_uid
                t_gid = t_pwn.pw_gid
                for post_act in self.post_actions:
                    post_act.run(t_uid, t_gid)


    def scan_tokens(self):
        """
        Scan the credential directory for new cc files.
        If found then process the TGT request and delete the old cc file.
        """
        cc_files = fnmatch.filter(os.listdir(self.cred_dir), '*.cred')
        real_euid = os.geteuid()
        for file_name in cc_files:
            cred_path = os.path.join(self.cred_dir, file_name)
            self.process_cred_file(cred_path)
        os.seteuid(real_euid)
        # self.remove_dead_creds()
        os.seteuid(real_euid)
        self.credmon_complete()


def main():
    """
    Set-up signal catching and launch the credential monitor.
    """
    logger = setup_logging()
    logger.info('Starting Credmon and registering signals')
    signal.signal(signal.SIGHUP, partial(signal_handler, logger))
    signal.signal(signal.SIGTERM, partial(signal_handler, logger))
    signal.signal(signal.SIGINT, partial(signal_handler, logger))
    signal.signal(signal.SIGQUIT, partial(signal_handler, logger))
    credential_dir = '/etc/batch_credds'
    credmon = CredentialMonitor(credential_dir)
    credmon.drop_pid()
    credmon.credmon_incomplete()
    logger.info('Entering main loop')
    while True:
        try:
            credmon.scan_tokens()
        except Exception, unknown:
            logger.error(unknown)
        logger.info('Sleeping 60 seconds.')
        time.sleep(60)

if __name__ == '__main__':
    main()

